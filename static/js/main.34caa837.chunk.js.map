{"version":3,"sources":["components/card/card.jsx","components/card-list/card-list.jsx","components/search-box/search-box-txt.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBoxTxt","placeholder","handleChange","type","onChange","App","state","searchField","bind","fetch","then","response","json","users","setState","e","this","target","value","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uUAGaA,EAAO,SAAAC,GAAK,OACrB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,YCHbC,G,MAAW,SAACR,GACrB,OAAM,qBAAKC,UAAU,YAAf,SACED,EAAMS,SAASC,KAAI,SAAAD,GAClB,OAAO,cAAC,EAAD,CAAwBL,QAAWK,GAAxBA,EAASJ,WCH3BM,G,MAAe,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACd,uBACAZ,UAAU,SACVa,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCsCTG,E,kDAzCb,aAAe,IAAD,8BACZ,gBAEKC,MAAQ,CACXR,SAAS,GACTS,YAAY,IAId,EAAKL,aAAe,EAAKA,aAAaM,KAAlB,gBATR,E,qDAYd,WAAqB,IAAD,OAClBC,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKC,SAAS,CAAChB,SAASe,S,0BAI7C,SAAaE,GACXC,KAAKF,SAAS,CAACP,YAAYQ,EAAEE,OAAOC,U,oBAGtC,WACE,MAAiCF,KAAKV,MAA9BR,EAAR,EAAQA,SAASS,EAAjB,EAAiBA,YACXY,EAAmBrB,EAASsB,QAAO,SAAA3B,GAAO,OAC5CA,EAAQE,KAAK0B,cAAcC,SAASf,EAAYc,kBAEpD,OACI,sBAAK/B,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CACIW,YAAc,kBACdC,aAAgBc,KAAKd,eAEzB,cAAC,EAAD,CAAUJ,SAAYqB,W,GApCdI,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.34caa837.chunk.js","sourcesContent":["import React from \"react\";\nimport './card-style.css'\n\nexport const Card = props=>(\n    <div className='card-container'>\n        <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\n        <h2>{props.monster.name}</h2>\n        <p>{props.monster.email}</p>\n    </div>\n)","import React from \"react\";\nimport {Card} from \"../card/card\";\nimport './card-list.css'\n\nexport const CardList = (props)=>{\n    return<div className='card-list'>{\n            props.monsters.map(monsters => {\n             return <Card key={monsters.id} monster = {monsters}/>\n            })\n          }\n    </div>\n}","import React from \"react\";\n\nimport './search-box-style.css'\n\nexport const SearchBoxTxt = ({placeholder, handleChange})=>(\n              <input\n              className='search'\n              type='search'\n              placeholder={placeholder}\n              onChange={handleChange}\n             />\n\n)\n\n","import React,{Component} from \"react\";\nimport './App.css';\nimport {CardList} from \"./components/card-list/card-list\";\nimport {SearchBoxTxt} from \"./components/search-box/search-box-txt\";\n\nclass App extends Component{\n  constructor() {\n    super();\n\n    this.state = {\n      monsters:[],\n      searchField:''\n\n    };\n\n    this.handleChange = this.handleChange.bind(this)\n   }\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n        .then(response => response.json())  // convert api to json\n        .then(users => this.setState({monsters:users})) //read json string and mapping to state\n\n  }\n\n  handleChange(e){\n    this.setState({searchField:e.target.value})\n  }\n\n  render() {\n    const { monsters,searchField } = this.state;\n    const filteredMonsters = monsters.filter(monster =>\n        monster.name.toLowerCase().includes(searchField.toLowerCase())\n    )\n    return(\n        <div className=\"App\">\n          <h1>Monsters Rolodex</h1>\n          <SearchBoxTxt\n              placeholder = \"search monsters\"\n              handleChange = {this.handleChange}\n          />\n          <CardList monsters = {filteredMonsters}/>\n        </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}